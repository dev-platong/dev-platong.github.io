<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dev-platong's home</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2023-02-28T00:00:00+09:00</updated><entry><title>ExoPlayerのsetMediaItemを読んだ時</title><link href="/exoplayernosetmediaitemwodu-ndashi.html" rel="alternate"></link><published>2023-02-28T00:00:00+09:00</published><updated>2023-02-28T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-28:/exoplayernosetmediaitemwodu-ndashi.html</id><summary type="html">&lt;h2&gt;ExoPlayer.setMediaItemを呼びます。&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ExoPlayerImpl.setMediaSourcesInternal()&lt;/code&gt; が呼ばれます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L1529"&gt;exoplayer2/ExoPlayerImpl.java#L1529&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仰々しいですが、やっていることは &lt;code&gt;internalPlayer.setMediaSources()&lt;/code&gt; を呼び、 &lt;code&gt;updatePlaybackInfo()&lt;/code&gt; を呼びます。&lt;/p&gt;
&lt;h2&gt;ExoPlayerImplInternal.setMediaSources()&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MSG_SET_MEDIA_SOURCES …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;ExoPlayer.setMediaItemを呼びます。&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ExoPlayerImpl.setMediaSourcesInternal()&lt;/code&gt; が呼ばれます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L1529"&gt;exoplayer2/ExoPlayerImpl.java#L1529&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仰々しいですが、やっていることは &lt;code&gt;internalPlayer.setMediaSources()&lt;/code&gt; を呼び、 &lt;code&gt;updatePlaybackInfo()&lt;/code&gt; を呼びます。&lt;/p&gt;
&lt;h2&gt;ExoPlayerImplInternal.setMediaSources()&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MSG_SET_MEDIA_SOURCES&lt;/code&gt; を Targetに送ります。そして自身の &lt;code&gt;setMediaItemsInternal()&lt;/code&gt; を呼びます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L522-L523"&gt;ExoPlayerImplInternal.java#L522-L523&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/029a2b27cbdc27cf9d51d4a73ebeb503968849f6/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L692"&gt;ExoPlayerImplInternal.java#L692&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最終的に&lt;code&gt;handleMediaSourceListInfoRefreshed()&lt;/code&gt;が呼ばれます。このメソッドは長すぎるので明日。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/029a2b27cbdc27cf9d51d4a73ebeb503968849f6/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L1793"&gt;ExoPlayerImplInternal.java#L1793&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;やはりExoPlayerImplInternalのあるメソッドまで落ちてくる。明日は &lt;code&gt;handleMediaSourceListInfoRefreshed()&lt;/code&gt; を詳解します。&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry><entry><title>SimpleExoPlayerの生成時</title><link href="/simpleexoplayernosheng-cheng-shi.html" rel="alternate"></link><published>2023-02-27T00:00:00+09:00</published><updated>2023-02-27T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-27:/simpleexoplayernosheng-cheng-shi.html</id><summary type="html">&lt;h2&gt;Constructing時に関連するクラス・プロパティ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PriorityTaskManager： その名の通り優先的にタスクを実行するクラス&lt;/li&gt;
&lt;li&gt;AudioAttributes： 全てのAPIでサポートでき …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Constructing時に関連するクラス・プロパティ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PriorityTaskManager： その名の通り優先的にタスクを実行するクラス&lt;/li&gt;
&lt;li&gt;AudioAttributes： 全てのAPIでサポートできる android.media.AudioAttributes の強化版&lt;/li&gt;
&lt;li&gt;VideoScalingMode： クロップかfitするためのスケールしかない。デフォルトはfit。MediaCodecベースの Renderer が利用可能で、SurfaceViewが出力に指定されている時に利用できる。&lt;/li&gt;
&lt;li&gt;VideoChangeFrameRateStrategy：後述&lt;/li&gt;
&lt;li&gt;skipSilenceEnabled：無音の音声ストリームをスキップするか、デフォルトはfalse&lt;/li&gt;
&lt;li&gt;detachSurfaceTimeoutMs： プレイヤーからSurfaceがデタッチされるタイムアウト秒数（ms）。&lt;/li&gt;
&lt;li&gt;ComponentListener： 一般的な説明は後述。SimpleExoPlayerは、AnalyticsCollectorと、個別に登録したlisntersに処理を委譲するだけだが、例外もいくつかあるため都度覗くこと。&lt;/li&gt;
&lt;li&gt;FrameMetadataListener：ビデオフレームに紐付くメタデータのリッスンと、カメラモーションのリッスン。&lt;/li&gt;
&lt;li&gt;renderes：RendererFactoryから生成します。&lt;/li&gt;
&lt;li&gt;volume：デフォルトで1です。&lt;/li&gt;
&lt;li&gt;currentCues：空のリスト&lt;/li&gt;
&lt;li&gt;throwsWhenUsingWrongThread：デフォルトでtrueです。再生スレッド以外からプレイヤーが触れられた時に例外をスローします。&lt;/li&gt;
&lt;li&gt;AudioBecomingNoisyManager：後述&lt;/li&gt;
&lt;li&gt;AudioFocusManager：　Audio Focusが何のことか分からないので&lt;a href="https://github.com/dev-platong/dev-platong.github.io/issues/12"&gt;いずれ調べます。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StreamVolumeManager： android.media.AudioManagerのラップクラスです。音声ストリームのボリュームを扱います。&lt;/li&gt;
&lt;li&gt;WakeLockManager：&lt;a href="https://developer.android.com/training/scheduling/wakelock?hl=ja"&gt;androidのWakeLock&lt;/a&gt;を扱います。&lt;/li&gt;
&lt;li&gt;WifiLockManager：&lt;a href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock"&gt;androidのWifiLock&lt;/a&gt;を扱います。&lt;/li&gt;
&lt;li&gt;DeviceInfo：再生しているデバイスの情報を持ちます。といってもローカルかリモートか（キャスト）とminVolumeとmaxVolumeくらいです。（命名変更が求められるところ）&lt;/li&gt;
&lt;li&gt;videoSize：VideoSize.UNKNOWNで生成されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その後は、rendererにメッセージをセットして終わりです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java#L430"&gt;SimpleExoPlayer.java#L430&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;VideoChangeFrameRateStrategy&lt;/h3&gt;
&lt;p&gt;MediaCodecベースのRendererが利用可能な場合に利用できる。&lt;br&gt;
アプリケーションは、 Surfaceの &lt;code&gt;CHANGE_FRAME_RATE_ALWAYS&lt;/code&gt; を &lt;code&gt;C#VIDEO_CHANGE_FRAME_RATE_STRATEGY_OFF&lt;/code&gt; にセットした上で、ExoPlayerが &lt;code&gt;Surface#setFrameRate&lt;/code&gt; を操作して実現する。&lt;/p&gt;
&lt;h3&gt;ComponentListener&lt;/h3&gt;
&lt;p&gt;ExoPlayerでは、各クラスでprivate finalで実装されているリスナーです。&lt;/p&gt;
&lt;h3&gt;AudioBecomingNoisyManager&lt;/h3&gt;
&lt;p&gt;デフォルトではBuilderの &lt;code&gt;handleAudioBecomingNoisy&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; のため、機能しません。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java#L422"&gt;ExoPlayer.java#L422&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この機能を &lt;code&gt;true&lt;/code&gt; にする場合には、&lt;code&gt;AUDIO_BECOMING_NOIDY&lt;/code&gt; の検出時に &lt;code&gt;playWhenReady&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; になります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java#L2032-L2037"&gt;SimpleExoPlayer.java#L2032-L2037&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ExoPlayerImplやExoPlayerImplInternalで具体的な処理を行うため、SimpleExoではより付加価値的なクラス生成を行なっている。&lt;br&gt;
明日は&lt;a href="./exoplayer_set_media_item.md"&gt;ExoPlayer.setMediaItem()を追います。&lt;/a&gt;&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry><entry><title>LivePlaybackSpeedControlの詳細（アルゴリズム）</title><link href="/liveplaybackspeedcontrolnoxiang-xi-arugorizumu.html" rel="alternate"></link><published>2023-02-26T00:00:00+09:00</published><updated>2023-02-26T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-26:/liveplaybackspeedcontrolnoxiang-xi-arugorizumu.html</id><summary type="html">&lt;h2&gt;maybeXXXに&lt;/h2&gt;
&lt;p&gt;ExoPlayerには &lt;code&gt;maybeXXX()&lt;/code&gt; というメソッドが多々ある。&lt;br&gt;
何かしらの副作用を引き起こす可能性があるメソッドであり、読むときは条 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;maybeXXXに&lt;/h2&gt;
&lt;p&gt;ExoPlayerには &lt;code&gt;maybeXXX()&lt;/code&gt; というメソッドが多々ある。&lt;br&gt;
何かしらの副作用を引き起こす可能性があるメソッドであり、読むときは条件に注目して読むことになる。&lt;/p&gt;
&lt;h2&gt;TargetLiveOffsetのリセット&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;maybeResetTargetLiveOffset()&lt;/code&gt; が &lt;code&gt;LiveConfiguration&lt;/code&gt; が更新されるか、&lt;code&gt;targetLiveOffset&lt;/code&gt; が更新される場合に呼ばれます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L299-L322"&gt;DefaultLivePlaybackSpeedControl.java#L299-L322&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;targetLiveOffsetOverrideUs&lt;/code&gt; があれば、これを &lt;code&gt;idealTargetLiveOffset&lt;/code&gt; と &lt;code&gt;currentTargetLiveOffset&lt;/code&gt; に設定する。
 ない場合には LiveConfiguration経由のtargetOffset （ &lt;code&gt;mediaConfigurationTargetLiveOffsetUs&lt;/code&gt; ） を設定する。&lt;/p&gt;
&lt;p&gt;すでに &lt;code&gt;idealTargetLiveOffset&lt;/code&gt; が &lt;code&gt;idealOffsetUs&lt;/code&gt; と同じ秒数だった場合にはアーリーリターンする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;smoothedMinPossibleLiveOffsetUs&lt;/li&gt;
&lt;li&gt;smoothedMinPossibleLiveOffsetDeviationUs&lt;/li&gt;
&lt;li&gt;lastPlaybackSpeedUpdateMs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がリセットされる。&lt;/p&gt;
&lt;h2&gt;リバッファリングが起きた時、&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;targetLiveOffsetRebufferDeltaUs&lt;/code&gt; 　の分だけ &lt;code&gt;currentTargetLiveOffsetUs&lt;/code&gt; を増やし、 &lt;code&gt;lastPlaybackSpeedUpdateMs&lt;/code&gt; をアンセットします。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L321"&gt;DefaultLivePlaybackSpeedControl.java#L321&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;平滑化（線形）&lt;/h2&gt;
&lt;p&gt;引数として渡された2つの値を、&lt;code&gt;smoothingFactor&lt;/code&gt; の割合で足し合わせます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;long&lt;/span&gt; &lt;span class="nv"&gt;smooth&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;long&lt;/span&gt; &lt;span class="nv"&gt;smoothedValue&lt;/span&gt;, &lt;span class="nv"&gt;long&lt;/span&gt; &lt;span class="nv"&gt;newValue&lt;/span&gt;, &lt;span class="nv"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;smoothingFactor&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;long&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;smoothingFactor&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;smoothedValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;smoothingFactor&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;newValue&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L443-L445"&gt;DefaultLivePlaybackSpeedControl.java#L443-L445&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;SmoothedMinPossibleLiveOffsetUs のアップデート&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;liveOffsetUs&lt;/code&gt; と &lt;code&gt;bufferedDurationUs&lt;/code&gt; の差をとり &lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; とします。仮に &lt;code&gt;liveOffset&lt;/code&gt; が 8us、 &lt;code&gt;bugfferedDurationUs&lt;/code&gt; が 5us の場合、 &lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; は 3us となります。&lt;/p&gt;
&lt;p&gt;その後、  &lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; そのままのものと、 &lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; と &lt;code&gt;smoothedMinPossibleLiveOffsetUs&lt;/code&gt; で 平滑化したものを比較し大きい方を &lt;code&gt;smoothedMinPossibleLiveOffsetUs&lt;/code&gt; とします。これは安全で可能な値のうち、トラックをより良い値に保持すべきだからです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L394-L402"&gt;DefaultLivePlaybackSpeedControl.java#L394-L402&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minPossibleLiveOffsetDeviationUs&lt;/code&gt; は &lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; と &lt;code&gt;smoothedMinPossibleLiveOffsetUs&lt;/code&gt; の差です。（&lt;code&gt;minPossibleLiveOffsetUs&lt;/code&gt; が採択された場合この値は0になります。）&lt;/p&gt;
&lt;h2&gt;TargetLiveOffsetの調整&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;safeOffsetUs&lt;/code&gt; を minPossibleLiveOffsetDeviationUs を &lt;code&gt;smoothedMinPossibleLiveOffsetUs + 3 * smoothedMinPossibleLiveOffsetDeviationUs;&lt;/code&gt; と定義します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;currentTargetLiveOffsetUs&lt;/code&gt; の値を &lt;code&gt;safeOffsetUs&lt;/code&gt; に近づけていきます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L413"&gt;DefaultLivePlaybackSpeedControl.java#L413&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;調整後のスピードの取得&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mediaConfigurationTargetLiveOffsetUs&lt;/code&gt; が TIME_UNSET の場合は常に1です。（狙うOffsetがないため）&lt;/p&gt;
&lt;p&gt;引数として渡された &lt;code&gt;liveOffset&lt;/code&gt; で &lt;code&gt;currentTargetLiveOffset&lt;/code&gt; の値を変化させたのちに、その差をとります。（currentTargetLiveOffsetはsafeOffsetに寄っているため値に差が出ます。）&lt;/p&gt;
&lt;p&gt;この値が速度を変化させるべき値となるため、その値にFactorをかけて速度を調整します。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L334"&gt;DefaultLivePlaybackSpeedControl.java#L334&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;線形平滑化を利用する。（前回の値を考慮する）&lt;/li&gt;
&lt;li&gt;前回の値を考慮しながらtargetOffsetを調整している。&lt;/li&gt;
&lt;li&gt;速度の調整は、渡されたTargetOffsetからcurrentTargetOffsetの値を前回の値を考慮しつつ変化させ、差を取って決定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明日はExoPlayer生成時に戻り、&lt;a href="./exoplayer_constructing_simpleexoplayer.md"&gt;SimpleExoPlayerの生成時に何が起きるかを追います。&lt;/a&gt;&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry><entry><title>Low Latency時に快適な再生：LivePlaybackSpeedControlの挙動を追う</title><link href="/low-latencyshi-nikuai-shi-nazai-sheng-liveplaybackspeedcontrolnoju-dong-wozhui-u.html" rel="alternate"></link><published>2023-02-25T00:00:00+09:00</published><updated>2023-02-25T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-25:/low-latencyshi-nikuai-shi-nazai-sheng-liveplaybackspeedcontrolnoju-dong-wozhui-u.html</id><summary type="html">&lt;h2&gt;Live再生時にMediaに設定される LiveConfigurationクラス&lt;/h2&gt;
&lt;p&gt;オフセットと再生速度のmin/maxが設定できる。オフセットに関してはターゲット …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Live再生時にMediaに設定される LiveConfigurationクラス&lt;/h2&gt;
&lt;p&gt;オフセットと再生速度のmin/maxが設定できる。オフセットに関してはターゲットも設定できる。&lt;/p&gt;
&lt;h2&gt;LivePlaybackSpeedControlインターフェース&lt;/h2&gt;
&lt;p&gt;ターゲットオフセットは、 &lt;code&gt;LivePlaybackSpeedControl&lt;/code&gt; から上書きできる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java#L41"&gt;LivePlaybackSpeedControl.java#L41&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユーザーインタラクションではないリバッファリングの検知も行う。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java#L50"&gt;LivePlaybackSpeedControl.java#L50&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現在のオフセット位置とバッファ位置を渡すことで、調整のための速度を返すメソッドがある。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java#L60"&gt;LivePlaybackSpeedControl.java#L60&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現在のターゲットオフセットは外部からも取得可能（隠蔽したい意図はないらしい、内部的に変更されることがあるのか？）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/LivePlaybackSpeedControl.java#L66"&gt;LivePlaybackSpeedControl.java#L66&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DefaultLivePlaybackSpeedControl&lt;/h2&gt;
&lt;p&gt;速度のコントロールメカニズムは比例制御を利用する。 &lt;code&gt;1.0 + 比例制御定数 * （ 現在のライブオフセット秒数 - ターゲットライブオフセット秒数 ）&lt;/code&gt; で表される。&lt;/p&gt;
&lt;p&gt;比例制御定数はデフォルトで &lt;code&gt;0.1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;リバッファリングが起きた時、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Builder#setTargetLiveOffsetIncrementOnRebufferMs(long targetLiveOffsetIncrementOnRebufferMs)&lt;/code&gt; の分だけ、target offsetが増加し、ネットワークケイパビリティが縮小する。&lt;/p&gt;
&lt;p&gt;状況が改善すると、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Builder#setMinPossibleLiveOffsetSmoothingFactor(float minPossibleLiveOffsetSmoothingFactor)&lt;/code&gt; の分だけ、target offsetが縮小する。注意するのは秒数をしているするのではなく、ファクターであると。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/release-v2/library/core/src/main/java/com/google/android/exoplayer2/DefaultLivePlaybackSpeedControl.java#L31"&gt;DefaultLivePlaybackSpeedControl.java#L31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デフォルトの速度はMin 0.97 / Max 1.03 倍で設定されている。&lt;br&gt;
速度アップデートの感覚はデフォルトで1秒おき。&lt;/p&gt;
&lt;p&gt;リバッファリングが起きた時に、ライブオフセットの秒数はデフォルトで0.5秒増える。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LivePlaybackSpeedControlでは、ターゲットオフセットに狙って速度を変更する。&lt;/li&gt;
&lt;li&gt;ターゲットオフセットは内部の振る舞いにより変更される。&lt;/li&gt;
&lt;li&gt;DefaultLivePlaybackSpeedControlでは比例制御が行われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明日はより詳細に&lt;a href="./exoplayer_detail_of_liveplaybackspeedcontrol.md"&gt;アルゴリズムを追います。&lt;/a&gt;&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry><entry><title>ExoPlayerImplInternalの挙動を追う（生成まわり）</title><link href="/exoplayerimplinternalnoju-dong-wozhui-usheng-cheng-mawari.html" rel="alternate"></link><published>2023-02-24T00:00:00+09:00</published><updated>2023-02-24T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-24:/exoplayerimplinternalnoju-dong-wozhui-usheng-cheng-mawari.html</id><summary type="html">&lt;h2&gt;ExoPlayerImplInternalの生成時&lt;/h2&gt;
&lt;h3&gt;LoadControl関連&lt;/h3&gt;
&lt;p&gt;LoadControl から 巻き戻し関連の値を取得する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L248-L249"&gt;ExoPlayerImplInternal.java#L248-L249&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PlaybackInfo関連&lt;/h3&gt;
&lt;p&gt;ダミーのPlaybackInfoインスタンスと、それに基づく PlaybackInfoUpdateク …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;ExoPlayerImplInternalの生成時&lt;/h2&gt;
&lt;h3&gt;LoadControl関連&lt;/h3&gt;
&lt;p&gt;LoadControl から 巻き戻し関連の値を取得する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L248-L249"&gt;ExoPlayerImplInternal.java#L248-L249&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PlaybackInfo関連&lt;/h3&gt;
&lt;p&gt;ダミーのPlaybackInfoインスタンスと、それに基づく PlaybackInfoUpdateクラスを作る。&lt;/p&gt;
&lt;p&gt;PlaybackInfoUpdateクラスは ExoPlayerImplInternal で定義されるクラス。&lt;br&gt;
保持されている PlaybackInfo の情報が外部に伝わっているとは限らない（pengingされている）。&lt;br&gt;
&lt;code&gt;void incrementPendingOperationAcks(int operationAcks)&lt;/code&gt; が呼び出されるタイミングで pending が解除される。&lt;br&gt;
&lt;code&gt;incrementPendingOperationAcks&lt;/code&gt; は ExoPlayerImpl と ExoPlayerImplInternal だけで使用される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L251-L252"&gt;ExoPlayerImplInternal.java#L251-L252&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Renderer関連&lt;/h3&gt;
&lt;p&gt;Rendererの再生特性（DRMをサポートするか・トンネルモードをサポートするかなど）を配列で保持する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L253-L257"&gt;ExoPlayerImplInternal.java#L253-L257&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PlayerMessage関連&lt;/h3&gt;
&lt;h4&gt;PlayerMessageクラス&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;package com.google.android.exoplayer2&lt;/code&gt; にある、Playerに何か挙動を引き起こすためメッセージ。スレッドが死んでいる場合に実行を中止したり、pendingしたりできる点でCommandパターンに近い。&lt;/p&gt;
&lt;p&gt;Senderインターフェースを実装するものから送出され、Targetインターフェースを持つものが受け取る。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/PlayerMessage.java"&gt;PlayerMessage.java&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;PendingMessageInfo&lt;/h4&gt;
&lt;p&gt;ExoPlayerImplInternal特有のクラス。PlayerMessageがどの位置で解決されたかを、&lt;code&gt;periodIndex&lt;/code&gt;, &lt;code&gt;periodTimeUs&lt;/code&gt;, &lt;code&gt;periodUid&lt;/code&gt; で保持する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L259"&gt;ExoPlayerImplInternal.java#L259&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Timeline関連&lt;/h3&gt;
&lt;p&gt;Timeline.WindowとTimeline.Periodをそれぞれフィールドに保持する。&lt;/p&gt;
&lt;p&gt;もしTimelineに詳しくない場合はわかりやすい&lt;a href="https://exoplayer.dev/doc/reference/com/google/android/exoplayer2/Timeline.html"&gt;com/google/android/exoplayer2/Timeline.html&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;この時、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowは 単一のwindow uidと空のmediaItem&lt;/li&gt;
&lt;li&gt;Periodは 広告再生ステートではない状態&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で生成される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L261-L262"&gt;ExoPlayerImplInternal.java#L261-L262&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;TrackSelector関連&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;init(InvalidationListener listener, BandwidthMeter bandwidthMeter)&lt;/code&gt; が呼ばれるが、引数をフィールドに保持するだけのため、一般的なソフトウェアにおいてはコンストラクタのような内容である。しかしExoPlayerはサブコンポーネントの振る舞いをDIよって変更できる設計であるため、コンストラクタがその旨で利用される。そのためこちらは&lt;code&gt;init&lt;/code&gt;となっているのではないかと推察できる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InvalidationListener&lt;/code&gt; は、以前のトラック選択で選択され利用中の &lt;code&gt;Track&lt;/code&gt; を失効させるための処理を担うハンドラのリスナー。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L263"&gt;ExoPlayerImplInternal.java#L263&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;MediaPeriodQueueクラス&lt;/h3&gt;
&lt;p&gt;MediaPeriodを保持し、先頭のメディアが読まれるキュー。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/029a2b27cbdc27cf9d51d4a73ebeb503968849f6/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java#L33-L37"&gt;MediaPeriodQueue.java#L33-L37&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ExoPlayerImplInternalのコンストラクタで生成される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L268"&gt;ExoPlayerImplInternal.java#L268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MediaPeriodQueueクラスのコンストラクタでPeriodとWindowを生成するが、これは ExoPlayerImplInternalのPeriod・Windowインスタンスとは別物であることに注意。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/029a2b27cbdc27cf9d51d4a73ebeb503968849f6/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java#L90"&gt;MediaPeriodQueue.java#L90&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;スレッド関連&lt;/h3&gt;
&lt;p&gt;新しい Thread, Looper, Handler が生成され保持される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java#L271-L276"&gt;ExoPlayerImplInternal.java#L271-L276&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;一旦ここまでで ExoPlayerが生成された時の関連クラスは把握できた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持を目的とするPlaybackInfoUpdate・PlayerMessageInfo・MediaPeriodQueueの初期化を行う。&lt;/li&gt;
&lt;li&gt;Window/Periodを生成する。&lt;/li&gt;
&lt;li&gt;TrackSelectorを初期化する。&lt;/li&gt;
&lt;li&gt;RendererCapabilitiesの取得を行う。&lt;/li&gt;
&lt;li&gt;スレッドを生成する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明日は低遅延周りを理解したいため、 &lt;a href="./exoplayer_live_playback_speed_control.md"&gt;&lt;code&gt;LivePlaybackSpeedControl&lt;/code&gt; を深追いする。&lt;/a&gt;&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry><entry><title>ExoPlayerが生成される時、具体的にはどんなクラスが生成されるのか</title><link href="/exoplayergasheng-cheng-sarerushi-ju-ti-de-nihadonnakurasugasheng-cheng-sarerunoka.html" rel="alternate"></link><published>2023-02-23T00:00:00+09:00</published><updated>2023-02-23T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-23:/exoplayergasheng-cheng-sarerushi-ju-ti-de-nihadonnakurasugasheng-cheng-sarerunoka.html</id><summary type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ExoPlayerでの再生問題におけるトラブルシューティング迅速化のため、再生に関わるクラスを把握する。&lt;br&gt;
今回はDefault実装 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ExoPlayerでの再生問題におけるトラブルシューティング迅速化のため、再生に関わるクラスを把握する。&lt;br&gt;
今回はDefault実装での ExoPlayer の生成時にどのようなクラスがインスタンス化され、それ以降に処理を委譲するために保持されているのか調査する。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ソフトウェア&lt;/th&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ExoPlayer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/google/ExoPlayer/releases/tag/r2.16.1"&gt;r2.16.1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;検証には &lt;code&gt;ExoPlayer.demo&lt;/code&gt; モジュールを利用する。&lt;/p&gt;
&lt;h2&gt;基礎知識&lt;/h2&gt;
&lt;p&gt;ExoPlayerではコンポーネントと呼ばれる一定の責務を持った塊がinterfaceとして存在し、各コンポーネントがDefault実装を持っているという構成を持っている。&lt;br&gt;
コンポーネントはインジェクトをサポートするので、サブコンポーネントにおける振る舞いをコンストラクタ経由でカスタムクラスを注入することで変更することができる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java#L102-L112"&gt;ExoPlayer.java#L102-L112&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本的にはよほど要件が複雑でない限りは、ライブラリが提供するDefault実装を使うことになるので、今回もDefault実装を使っていく。&lt;/p&gt;
&lt;h2&gt;ExoPlayerの生成&lt;/h2&gt;
&lt;p&gt;ExoPlayerインターフェース の実装である、 SimpleExoPlayerクラス が ExoPlayerインターフェースのbuilder から生成される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java#L967"&gt;ExoPlayer.java#L967&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この時、 SimpleExoPlayerクラス では ExoPlayerImplクラスを生成し、playerフィールドに保持する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java#L479"&gt;SimpleExoPlayer.java#L479&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ExoPlayerImplインスタンスの生成時&lt;/h3&gt;
&lt;p&gt;Renderer・TrackSelector・MediaSourceFactory・LoadControl・BandwidthMeter・AnalyticsCollector・LivePlaybackSpeedControl・Clock・Playerなどが与えられる。&lt;br&gt;
各クラスの概要は以下にまとめるが、それぞれの詳細は追って記事にしていく。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L154"&gt;ExoPlayerImpl.java#L154&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;クラス名&lt;/th&gt;
&lt;th&gt;役割の概略&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Renderer&lt;/td&gt;
&lt;td&gt;SampleStreamコンポーネントからメディアを読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TrackSelector&lt;/td&gt;
&lt;td&gt;Rendererコンポーネントによって消費されるトラックを選択する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediaSourceFactory&lt;/td&gt;
&lt;td&gt;MediaItemクラスからMediaSourceを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LoadControl&lt;/td&gt;
&lt;td&gt;バッファリングをコントロールする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BandwidthMeter&lt;/td&gt;
&lt;td&gt;現在利用可能な帯域幅を推測する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AnalyticsCollector&lt;/td&gt;
&lt;td&gt;AnalyticsListenerコンポーネントにイベントを収集し送る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LivePlaybackSpeedControl&lt;/td&gt;
&lt;td&gt;着実にターゲットライブオフセットを維持するために速度をコントロールする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock&lt;/td&gt;
&lt;td&gt;System Clockの抽象化と、HandlerWrapperコンポーネントの生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Player&lt;/td&gt;
&lt;td&gt;あるならばラップして使うためのPlayer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;コンストラクタではdummyとなる値を生成し、最後に ExoPlayerInternalインスタンスを生成する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L250"&gt;ExoPlayerImpl.java#L250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ExoPlayerImplからExoPlayerImplInternalに渡される引数は、SimpleExoPlayerからExoPlayerImplに渡されるものとほとんど変わらない。&lt;br&gt;
このことからExoPlayerImplInternalは、ExoPlayerImplが内部的に保持するインスタンスの操作を担っていそうだということが推測できる。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ExoPlayer.Builder -&amp;gt; SimpleExoPlayer -&amp;gt; ExoPlayerImpl -&amp;gt; ExoPlayerInternal と生成される。&lt;/li&gt;
&lt;li&gt;SimpleExoPlayerのコンストラクタの時点で生成し、引数としてコンストラクタに渡されたクラスの実際の操作をExoPlayerImplInternalが責務として持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明日は&lt;a href="./exoplayer_detail_of_exoplayerimplinternal.md"&gt;ExoPlayerImplInternalの生成時の振る舞いを掘り下げていく。&lt;/a&gt;&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry></feed>