<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dev-platong's home - Android, ExoPlayer</title><link href="/" rel="alternate"></link><link href="/feeds/android-exoplayer.atom.xml" rel="self"></link><id>/</id><updated>2023-02-23T00:00:00+09:00</updated><entry><title>ExoPlayerが生成される時、具体的にはどんなクラスが生成されるのか</title><link href="/exoplayergasheng-cheng-sarerushi-ju-ti-de-nihadonnakurasugasheng-cheng-sarerunoka.html" rel="alternate"></link><published>2023-02-23T00:00:00+09:00</published><updated>2023-02-23T00:00:00+09:00</updated><author><name>dev-platong</name></author><id>tag:None,2023-02-23:/exoplayergasheng-cheng-sarerushi-ju-ti-de-nihadonnakurasugasheng-cheng-sarerunoka.html</id><summary type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ExoPlayerでの再生問題におけるトラブルシューティング迅速化のため、再生に関わるクラスを把握する。&lt;br&gt;
今回はDefault実装 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ExoPlayerでの再生問題におけるトラブルシューティング迅速化のため、再生に関わるクラスを把握する。&lt;br&gt;
今回はDefault実装での ExoPlayer の生成時にどのようなクラスがインスタンス化され、それ以降に処理を委譲するために保持されているのか調査する。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ソフトウェア&lt;/th&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ExoPlayer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/google/ExoPlayer/releases/tag/r2.16.1"&gt;r2.16.1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;検証には &lt;code&gt;ExoPlayer.demo&lt;/code&gt; モジュールを利用する。&lt;/p&gt;
&lt;h2&gt;基礎知識&lt;/h2&gt;
&lt;p&gt;ExoPlayerではコンポーネントと呼ばれる一定の責務を持った塊がinterfaceとして存在し、各コンポーネントがDefault実装を持っているという構成を持っている。&lt;br&gt;
コンポーネントはインジェクトをサポートするので、サブコンポーネントにおける振る舞いをコンストラクタ経由でカスタムクラスを注入することで変更することができる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java#L102-L112"&gt;ExoPlayer.java#L102-L112&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本的にはよほど要件が複雑でない限りは、ライブラリが提供するDefault実装を使うことになるので、今回もDefault実装を使っていく。&lt;/p&gt;
&lt;h2&gt;ExoPlayerの生成&lt;/h2&gt;
&lt;p&gt;ExoPlayerインターフェース の実装である、 SimpleExoPlayerクラス が ExoPlayerインターフェースのbuilder から生成される。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayer.java#L967"&gt;ExoPlayer.java#L967&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この時、 SimpleExoPlayerクラス では ExoPlayerImplクラスを生成し、playerフィールドに保持する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java#L479"&gt;SimpleExoPlayer.java#L479&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ExoPlayerImplインスタンスの生成時&lt;/h3&gt;
&lt;p&gt;Renderer・TrackSelector・MediaSourceFactory・LoadControl・BandwidthMeter・AnalyticsCollector・LivePlaybackSpeedControl・Clock・Playerなどが与えられる。&lt;br&gt;
各クラスの概要は以下にまとめるが、それぞれの詳細は追って記事にしていく。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L154"&gt;ExoPlayerImpl.java#L154&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;クラス名&lt;/th&gt;
&lt;th&gt;役割の概略&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Renderer&lt;/td&gt;
&lt;td&gt;SampleStreamコンポーネントからメディアを読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TrackSelector&lt;/td&gt;
&lt;td&gt;Rendererコンポーネントによって消費されるトラックを選択する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediaSourceFactory&lt;/td&gt;
&lt;td&gt;MediaItemクラスからMediaSourceを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LoadControl&lt;/td&gt;
&lt;td&gt;バッファリングをコントロールする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BandwidthMeter&lt;/td&gt;
&lt;td&gt;現在利用可能な帯域幅を推測する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AnalyticsCollector&lt;/td&gt;
&lt;td&gt;AnalyticsListenerコンポーネントにイベントを収集し送る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LivePlaybackSpeedControl&lt;/td&gt;
&lt;td&gt;着実にターゲットライブオフセットを維持するために速度をコントロールする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock&lt;/td&gt;
&lt;td&gt;System Clockの抽象化と、HandlerWrapperコンポーネントの生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Player&lt;/td&gt;
&lt;td&gt;あるならばラップして使うためのPlayer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;コンストラクタではdummyとなる値を生成し、最後に ExoPlayerInternalインスタンスを生成する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/ExoPlayer/blob/r2.16.1/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java#L250"&gt;ExoPlayerImpl.java#L250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ExoPlayerImplからExoPlayerImplInternalに渡される引数は、SimpleExoPlayerからExoPlayerImplに渡されるものとほとんど変わらない。&lt;br&gt;
このことからExoPlayerImplInternalは、ExoPlayerImplが内部的に保持するインスタンスの操作を担っていそうだということが推測できる。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ExoPlayer.Builder -&amp;gt; SimpleExoPlayer -&amp;gt; ExoPlayerImpl -&amp;gt; ExoPlayerInternal と生成される。&lt;/li&gt;
&lt;li&gt;SimpleExoPlayerのコンストラクタの時点で生成し、引数としてコンストラクタに渡されたクラスの実際の操作をExoPlayerImplInternalが責務として持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明日はExoPlayerImplInternalの振る舞いを掘り下げていく。&lt;/p&gt;</content><category term="Android, ExoPlayer"></category></entry></feed>